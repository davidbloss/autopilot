name: "Release"

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch All Tags
        run: git fetch --force --tags
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
      - name: Install Changie
        uses: miniscruff/changie-action@v1
        with:
          version: latest
          args: latest
      - name: Set Release Version
        id: version
        run: |
          echo "RELEASE_VERSION=$(date +v%Y.%-m.%-d)" >> $GITHUB_OUTPUT
      - name: Ensure Changelog
        run: |
          git config user.name "Bots"
          git config user.email "bots@github.com"
          if test -f ./.changes/${{ steps.version.outputs.RELEASE_VERSION }}.md
          then
            echo "Skip Changie..."
          else
            changie batch ${{ steps.version.outputs.RELEASE_VERSION }}
            changie merge
            git add .
            git commit -m "Cut Release '${{ steps.version.outputs.RELEASE_VERSION }}'"
            git push origin HEAD
          fi
          git tag -f ${{ steps.version.outputs.RELEASE_VERSION }} -m "Cut Release '${{ steps.version.outputs.RELEASE_VERSION }}'"
          git push -f origin refs/tags/${{ steps.version.outputs.RELEASE_VERSION }}
      - name: Ensure Release Does Not Exist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete ${{ steps.version.outputs.RELEASE_VERSION }} || true
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4.4.0
        with:
          args: release --clean --release-notes=./.changes/${{ steps.version.outputs.RELEASE_VERSION }}.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
